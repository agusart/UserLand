// Code generated by MockGen. DO NOT EDIT.
// Source: store/redis/auth_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	redis "userland/store/redis"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthStoreInterface is a mock of AuthStoreInterface interface.
type MockAuthStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStoreInterfaceMockRecorder
}

// MockAuthStoreInterfaceMockRecorder is the mock recorder for MockAuthStoreInterface.
type MockAuthStoreInterfaceMockRecorder struct {
	mock *MockAuthStoreInterface
}

// NewMockAuthStoreInterface creates a new mock instance.
func NewMockAuthStoreInterface(ctrl *gomock.Controller) *MockAuthStoreInterface {
	mock := &MockAuthStoreInterface{ctrl: ctrl}
	mock.recorder = &MockAuthStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStoreInterface) EXPECT() *MockAuthStoreInterfaceMockRecorder {
	return m.recorder
}

// CreateForgotPasswordVerificationCode mocks base method.
func (m *MockAuthStoreInterface) CreateForgotPasswordVerificationCode(ctx context.Context, email string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForgotPasswordVerificationCode", ctx, email, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForgotPasswordVerificationCode indicates an expected call of CreateForgotPasswordVerificationCode.
func (mr *MockAuthStoreInterfaceMockRecorder) CreateForgotPasswordVerificationCode(ctx, email, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForgotPasswordVerificationCode", reflect.TypeOf((*MockAuthStoreInterface)(nil).CreateForgotPasswordVerificationCode), ctx, email, duration)
}

// CreateRegistrationVerificationCode mocks base method.
func (m *MockAuthStoreInterface) CreateRegistrationVerificationCode(ctx context.Context, email string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationVerificationCode", ctx, email, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationVerificationCode indicates an expected call of CreateRegistrationVerificationCode.
func (mr *MockAuthStoreInterfaceMockRecorder) CreateRegistrationVerificationCode(ctx, email, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationVerificationCode", reflect.TypeOf((*MockAuthStoreInterface)(nil).CreateRegistrationVerificationCode), ctx, email, duration)
}

// CreateTfaVerificationCode mocks base method.
func (m *MockAuthStoreInterface) CreateTfaVerificationCode(ctx context.Context, email string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTfaVerificationCode", ctx, email, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTfaVerificationCode indicates an expected call of CreateTfaVerificationCode.
func (mr *MockAuthStoreInterfaceMockRecorder) CreateTfaVerificationCode(ctx, email, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTfaVerificationCode", reflect.TypeOf((*MockAuthStoreInterface)(nil).CreateTfaVerificationCode), ctx, email, duration)
}

// GetRegistrationCodeEmail mocks base method.
func (m *MockAuthStoreInterface) GetRegistrationCodeEmail(ctx context.Context, registrationToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationCodeEmail", ctx, registrationToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationCodeEmail indicates an expected call of GetRegistrationCodeEmail.
func (mr *MockAuthStoreInterfaceMockRecorder) GetRegistrationCodeEmail(ctx, registrationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationCodeEmail", reflect.TypeOf((*MockAuthStoreInterface)(nil).GetRegistrationCodeEmail), ctx, registrationToken)
}

// GetResetPasswordCodeEmail mocks base method.
func (m *MockAuthStoreInterface) GetResetPasswordCodeEmail(ctx context.Context, resetPasswordToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordCodeEmail", ctx, resetPasswordToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordCodeEmail indicates an expected call of GetResetPasswordCodeEmail.
func (mr *MockAuthStoreInterfaceMockRecorder) GetResetPasswordCodeEmail(ctx, resetPasswordToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordCodeEmail", reflect.TypeOf((*MockAuthStoreInterface)(nil).GetResetPasswordCodeEmail), ctx, resetPasswordToken)
}

// GetTfaCodeEmail mocks base method.
func (m *MockAuthStoreInterface) GetTfaCodeEmail(ctx context.Context, tfaCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTfaCodeEmail", ctx, tfaCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTfaCodeEmail indicates an expected call of GetTfaCodeEmail.
func (mr *MockAuthStoreInterfaceMockRecorder) GetTfaCodeEmail(ctx, tfaCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTfaCodeEmail", reflect.TypeOf((*MockAuthStoreInterface)(nil).GetTfaCodeEmail), ctx, tfaCode)
}

// InsertSessionCache mocks base method.
func (m *MockAuthStoreInterface) InsertSessionCache(ctx context.Context, cache redis.SessionCache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSessionCache", ctx, cache)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSessionCache indicates an expected call of InsertSessionCache.
func (mr *MockAuthStoreInterfaceMockRecorder) InsertSessionCache(ctx, cache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSessionCache", reflect.TypeOf((*MockAuthStoreInterface)(nil).InsertSessionCache), ctx, cache)
}
