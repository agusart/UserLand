// Code generated by MockGen. DO NOT EDIT.
// Source: store/redis/cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	redis "userland/store/redis"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheInterface is a mock of CacheInterface interface.
type MockCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInterfaceMockRecorder
}

// MockCacheInterfaceMockRecorder is the mock recorder for MockCacheInterface.
type MockCacheInterfaceMockRecorder struct {
	mock *MockCacheInterface
}

// NewMockCacheInterface creates a new mock instance.
func NewMockCacheInterface(ctrl *gomock.Controller) *MockCacheInterface {
	mock := &MockCacheInterface{ctrl: ctrl}
	mock.recorder = &MockCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInterface) EXPECT() *MockCacheInterfaceMockRecorder {
	return m.recorder
}

// DeleteSessionCache mocks base method.
func (m *MockCacheInterface) DeleteSessionCache(ctx context.Context, userId, sessionId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionCache", ctx, userId, sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionCache indicates an expected call of DeleteSessionCache.
func (mr *MockCacheInterfaceMockRecorder) DeleteSessionCache(ctx, userId, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionCache", reflect.TypeOf((*MockCacheInterface)(nil).DeleteSessionCache), ctx, userId, sessionId)
}

// Get mocks base method.
func (m *MockCacheInterface) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheInterfaceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheInterface)(nil).Get), ctx, key)
}

// GetSessionCache mocks base method.
func (m *MockCacheInterface) GetSessionCache(ctx context.Context, userId, sessionId uint) (*redis.SessionCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionCache", ctx, userId, sessionId)
	ret0, _ := ret[0].(*redis.SessionCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionCache indicates an expected call of GetSessionCache.
func (mr *MockCacheInterfaceMockRecorder) GetSessionCache(ctx, userId, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionCache", reflect.TypeOf((*MockCacheInterface)(nil).GetSessionCache), ctx, userId, sessionId)
}

// GetVerifyChangeEmail mocks base method.
func (m *MockCacheInterface) GetVerifyChangeEmail(ctx context.Context, userId uint, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyChangeEmail", ctx, userId, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyChangeEmail indicates an expected call of GetVerifyChangeEmail.
func (mr *MockCacheInterfaceMockRecorder) GetVerifyChangeEmail(ctx, userId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyChangeEmail", reflect.TypeOf((*MockCacheInterface)(nil).GetVerifyChangeEmail), ctx, userId, token)
}

// InsertSessionCache mocks base method.
func (m *MockCacheInterface) InsertSessionCache(ctx context.Context, cache redis.SessionCache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSessionCache", ctx, cache)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSessionCache indicates an expected call of InsertSessionCache.
func (mr *MockCacheInterfaceMockRecorder) InsertSessionCache(ctx, cache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSessionCache", reflect.TypeOf((*MockCacheInterface)(nil).InsertSessionCache), ctx, cache)
}

// RequestChangeEmail mocks base method.
func (m *MockCacheInterface) RequestChangeEmail(ctx context.Context, userId uint, email string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestChangeEmail", ctx, userId, email, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestChangeEmail indicates an expected call of RequestChangeEmail.
func (mr *MockCacheInterfaceMockRecorder) RequestChangeEmail(ctx, userId, email, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestChangeEmail", reflect.TypeOf((*MockCacheInterface)(nil).RequestChangeEmail), ctx, userId, email, duration)
}

// SetWithTimout mocks base method.
func (m *MockCacheInterface) SetWithTimout(ctx context.Context, key, val string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithTimout", ctx, key, val, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithTimout indicates an expected call of SetWithTimout.
func (mr *MockCacheInterfaceMockRecorder) SetWithTimout(ctx, key, val, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithTimout", reflect.TypeOf((*MockCacheInterface)(nil).SetWithTimout), ctx, key, val, timeout)
}

// Unlink mocks base method.
func (m *MockCacheInterface) Unlink(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockCacheInterfaceMockRecorder) Unlink(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockCacheInterface)(nil).Unlink), ctx, key)
}
