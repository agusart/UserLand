// Code generated by MockGen. DO NOT EDIT.
// Source: store/postgres/user_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	postgres "userland/store/postgres"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStoreInterface is a mock of UserStoreInterface interface.
type MockUserStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreInterfaceMockRecorder
}

// MockUserStoreInterfaceMockRecorder is the mock recorder for MockUserStoreInterface.
type MockUserStoreInterfaceMockRecorder struct {
	mock *MockUserStoreInterface
}

// NewMockUserStoreInterface creates a new mock instance.
func NewMockUserStoreInterface(ctrl *gomock.Controller) *MockUserStoreInterface {
	mock := &MockUserStoreInterface{ctrl: ctrl}
	mock.recorder = &MockUserStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoreInterface) EXPECT() *MockUserStoreInterfaceMockRecorder {
	return m.recorder
}

// ChangeUserEmail mocks base method.
func (m *MockUserStoreInterface) ChangeUserEmail(userId uint, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserEmail", userId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserEmail indicates an expected call of ChangeUserEmail.
func (mr *MockUserStoreInterfaceMockRecorder) ChangeUserEmail(userId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserEmail", reflect.TypeOf((*MockUserStoreInterface)(nil).ChangeUserEmail), userId, email)
}

// DeleteImage mocks base method.
func (m *MockUserStoreInterface) DeleteImage(userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockUserStoreInterfaceMockRecorder) DeleteImage(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockUserStoreInterface)(nil).DeleteImage), userId)
}

// DeleteUser mocks base method.
func (m *MockUserStoreInterface) DeleteUser(userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserStoreInterfaceMockRecorder) DeleteUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserStoreInterface)(nil).DeleteUser), userId)
}

// GetPasswordHistory mocks base method.
func (m *MockUserStoreInterface) GetPasswordHistory(userId uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHistory", userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordHistory indicates an expected call of GetPasswordHistory.
func (mr *MockUserStoreInterfaceMockRecorder) GetPasswordHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHistory", reflect.TypeOf((*MockUserStoreInterface)(nil).GetPasswordHistory), userId)
}

// GetUserByEmail mocks base method.
func (m *MockUserStoreInterface) GetUserByEmail(email string) (*postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserStoreInterfaceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserStoreInterface)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockUserStoreInterface) GetUserById(userId uint) (*postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(*postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserStoreInterfaceMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserStoreInterface)(nil).GetUserById), userId)
}

// IsUserVerified mocks base method.
func (m *MockUserStoreInterface) IsUserVerified(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserVerified", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserVerified indicates an expected call of IsUserVerified.
func (mr *MockUserStoreInterfaceMockRecorder) IsUserVerified(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserVerified", reflect.TypeOf((*MockUserStoreInterface)(nil).IsUserVerified), email)
}

// RegisterUser mocks base method.
func (m *MockUserStoreInterface) RegisterUser(user postgres.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserStoreInterfaceMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserStoreInterface)(nil).RegisterUser), user)
}

// SaveImage mocks base method.
func (m *MockUserStoreInterface) SaveImage(imgInfo postgres.ImgInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", imgInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockUserStoreInterfaceMockRecorder) SaveImage(imgInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockUserStoreInterface)(nil).SaveImage), imgInfo)
}

// SavePasswordToHistory mocks base method.
func (m *MockUserStoreInterface) SavePasswordToHistory(userId uint, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePasswordToHistory", userId, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePasswordToHistory indicates an expected call of SavePasswordToHistory.
func (mr *MockUserStoreInterfaceMockRecorder) SavePasswordToHistory(userId, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePasswordToHistory", reflect.TypeOf((*MockUserStoreInterface)(nil).SavePasswordToHistory), userId, passwordHash)
}

// SaveUserTfaSecret mocks base method.
func (m *MockUserStoreInterface) SaveUserTfaSecret(secret string, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserTfaSecret", secret, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserTfaSecret indicates an expected call of SaveUserTfaSecret.
func (mr *MockUserStoreInterfaceMockRecorder) SaveUserTfaSecret(secret, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserTfaSecret", reflect.TypeOf((*MockUserStoreInterface)(nil).SaveUserTfaSecret), secret, userId)
}

// UpdateUserBasicInfo mocks base method.
func (m *MockUserStoreInterface) UpdateUserBasicInfo(user postgres.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBasicInfo", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBasicInfo indicates an expected call of UpdateUserBasicInfo.
func (mr *MockUserStoreInterfaceMockRecorder) UpdateUserBasicInfo(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBasicInfo", reflect.TypeOf((*MockUserStoreInterface)(nil).UpdateUserBasicInfo), user)
}

// UpdateUserPassword mocks base method.
func (m *MockUserStoreInterface) UpdateUserPassword(userId uint, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", userId, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserStoreInterfaceMockRecorder) UpdateUserPassword(userId, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserStoreInterface)(nil).UpdateUserPassword), userId, newPassword)
}

// VerifyUser mocks base method.
func (m *MockUserStoreInterface) VerifyUser(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserStoreInterfaceMockRecorder) VerifyUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserStoreInterface)(nil).VerifyUser), email)
}
