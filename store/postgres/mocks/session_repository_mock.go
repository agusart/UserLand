// Code generated by MockGen. DO NOT EDIT.
// Source: store/postgres/session_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	postgres "userland/store/postgres"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionStoreInterface is a mock of SessionStoreInterface interface.
type MockSessionStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreInterfaceMockRecorder
}

// MockSessionStoreInterfaceMockRecorder is the mock recorder for MockSessionStoreInterface.
type MockSessionStoreInterfaceMockRecorder struct {
	mock *MockSessionStoreInterface
}

// NewMockSessionStoreInterface creates a new mock instance.
func NewMockSessionStoreInterface(ctrl *gomock.Controller) *MockSessionStoreInterface {
	mock := &MockSessionStoreInterface{ctrl: ctrl}
	mock.recorder = &MockSessionStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStoreInterface) EXPECT() *MockSessionStoreInterfaceMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockSessionStoreInterface) CreateClient(name string) (*postgres.ClientSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", name)
	ret0, _ := ret[0].(*postgres.ClientSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockSessionStoreInterfaceMockRecorder) CreateClient(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockSessionStoreInterface)(nil).CreateClient), name)
}

// CreateNewSession mocks base method.
func (m *MockSessionStoreInterface) CreateNewSession(session postgres.Session) (*postgres.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSession", session)
	ret0, _ := ret[0].(*postgres.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSession indicates an expected call of CreateNewSession.
func (mr *MockSessionStoreInterfaceMockRecorder) CreateNewSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSession", reflect.TypeOf((*MockSessionStoreInterface)(nil).CreateNewSession), session)
}

// DeleteSession mocks base method.
func (m *MockSessionStoreInterface) DeleteSession(session postgres.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionStoreInterfaceMockRecorder) DeleteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionStoreInterface)(nil).DeleteSession), session)
}

// GetSessionById mocks base method.
func (m *MockSessionStoreInterface) GetSessionById(id uint) (*postgres.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionById", id)
	ret0, _ := ret[0].(*postgres.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionById indicates an expected call of GetSessionById.
func (mr *MockSessionStoreInterfaceMockRecorder) GetSessionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionById", reflect.TypeOf((*MockSessionStoreInterface)(nil).GetSessionById), id)
}

// GetSessionByUserId mocks base method.
func (m *MockSessionStoreInterface) GetSessionByUserId(userId uint) ([]postgres.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUserId", userId)
	ret0, _ := ret[0].([]postgres.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUserId indicates an expected call of GetSessionByUserId.
func (mr *MockSessionStoreInterfaceMockRecorder) GetSessionByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUserId", reflect.TypeOf((*MockSessionStoreInterface)(nil).GetSessionByUserId), userId)
}

// UpdateSession mocks base method.
func (m *MockSessionStoreInterface) UpdateSession(session postgres.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockSessionStoreInterfaceMockRecorder) UpdateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockSessionStoreInterface)(nil).UpdateSession), session)
}
